##############################################################################
##############################################################################
# Ruby snippets


snippet if "if <condition> ... end"
if ${1:condition}
	${0:-# TODO}
% end
endsnippet



snippet ife "if <condition> ... else ... end"
if ${1:condition}
	${2:-# TODO}
% else
	${0:-# TODO}
% end
endsnippet



snippet ifee "if <condition> ... elseif <condition> ... else ... end"
if ${1:condition}
	${2:-# TODO}
% elsif ${3:condition}
	${4:-# TODO}
% else
	${0:-# TODO}
% end
endsnippet



snippet unless "unless <condition> ... end"
unless ${1:condition}
	${0:-# TODO}
% end
endsnippet



snippet unlesse "unless <condition> ... else ... end"
unless ${1:condition}
	${2:-# TODO}
% else
	${0:-# TODO}
% end
endsnippet



snippet unlesee "unless <condition> ... elseif <condition> ... else ... end"
unless ${1:condition}
	${2:-# TODO}
% elsif ${3:condition}
	${4:-# TODO}
% else
	${0:-# TODO}
% end
endsnippet



snippet for "(<from>..<to>).each do |<i>| <block> end"
(${1:from}..${2:to}).each do |${3:i}|
	${0:-# TODO}
% end
endsnippet



snippet "(\S+)\.each_?key" ".each_key do |key| <block> end" r
`!p snip.rv=match.group(1)`.each_key do |${1:key}|
	${0:-# TODO}
% end
endsnippet



snippet "(\S+)\.each_?value" ".each_value do |<value>| <block> end" r
`!p snip.rv=match.group(1)`.each_value do |${1:value}|
	${0:-# TODO}
% end
endsnippet



snippet each "<elements>.each do |<element>| <block> end"
${1:elements}.each do |${2:${1/s$//}}|
	${0:-# TODO}
% end
endsnippet



snippet "(\S+)\.Map" ".map { |<element>| <block> }" r
`!p snip.rv=match.group(1)`.map { |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`}| ${0:-# TODO} }
endsnippet



snippet "(\S+)\.map" ".map do |<element>| <block> end" r
`!p snip.rv=match.group(1)`.map do |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`}|
	${0:-# TODO}
% end
endsnippet



snippet "(\S+)\.[rR]everse_?each" ".reverse_each { |<element>| <block> }" r
`!p snip.rv=match.group(1)`.reverse_each { |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`}| ${0:-# TODO} }
endsnippet



snippet "(\S+)\.[eE]ach" ".each do |<element>| <block> end" r
`!p snip.rv=match.group(1)`.each do |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`}|
	${0:-# TODO}
% end
endsnippet



snippet "(\S+)\.each_?index" ".each_index do |<index>| <block> end" r
`!p snip.rv=match.group(1)`.each_index do |${1:index}|
	${0:-# TODO}
% end
endsnippet



snippet "(\S+)\.each_?pair" ".each_pair do |<key>,<value>| <block> end" r
`!p snip.rv=match.group(1)`.each_pair do |${1:key},${2:value}|
	${0:-# TODO}
% end
endsnippet



snippet "(\S+)\.sub" ".sub(<expression>) { <block> }" r
`!p snip.rv=match.group(1)`.sub(${1:expression}) { ${2:"replace_with"} }
endsnippet



snippet "(\S+)\.gsub" ".gsub(<expression>) { <block> }" r
`!p snip.rv=match.group(1)`.gsub(${1:expression}) { ${2:"replace_with"} }
endsnippet



snippet do "do |<key>| ... end" i
do |${1:key}|
	$0
% end
endsnippet



snippet Do "do ... end" i
do
	$0
% end
endsnippet


snippet until "until <expression> ... end"
until ${1:expression}
	${0:-# TODO}
% end
endsnippet



snippet while "while <expression> ... end"
while ${1:expression}
	${0:-# TODO}
% end
endsnippet



snippet begin "begin ... rescue ... end"
begin
	${1:-# TODO}
% rescue
	${0:-# TODO}
% end
endsnippet



snippet begin "begin ... rescue ... else ... ensure ... end"
begin
	${1:-# Raise exception}
% rescue Exception => e
	puts e.message
	puts e.backtrace.inspect
	${2:-# Rescue}
% else
	${3:-# other exception}
% ensure
	${0:-# always excute}
% end
endsnippet



snippet rescue
rescue Exception => e
	puts e.message
	puts e.backtrace.inspect
	${0:-# Rescue}
% end
endsnippet

# vim: set ts=2 sw=2 expandtab:
