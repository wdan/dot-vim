##############################################################################
##############################################################################
# RAILS snippets


snippet defc
# ${2:MATCH} /${3:controller}/${4:path/}$1
def ${1:name}
  $5
  respond_to do |format|
    format.html
  end
end
endsnippet



snippet has_many
has_many    :${1:variable}${2:, :dependent => :destroy}
endsnippet



snippet has_one
has_one     :${1:variable}${2:, :dependent => :destroy}
endsnippet



snippet partial
render :partial => "${1:partial_name}"${2:, :locals => \{ ${3:locals} \}}${4:, :layout => false}
endsnippet



snippet T
I18n.t('`!v substitute(substitute(substitute(@%, substitute(getcwd() . "/", "\/", "\\\\/", "g"), "", ""), "\\(\\.\\(html\\|js\\)\\.\\(haml\\|erb\\)\\|\\(_controller\\)\\?\\.rb\\)$", "", ""), "/", ".", "g")`.${2:${1/[^\w]/_/g}}${3}', :default => '${1:some_text}'${4})
endsnippet



# snippet t
# I18n.t('COMMON.${2:${1/[^\w]/_/g}}${3}', :default => '${1:some_text}'${4})
# endsnippet



snippet t
I18n.t("$1")
endsnippet



snippet html
$('#${2:page_body}').html('#{escape_javascript(render :partial => '${1:new}', :layout => false)}');
endsnippet



snippet attr "attr_accessible"
attr_accessible :${0:attr_names}
endsnippet



snippet attr "attr_protected"
attr_protected :${0:attr_names}
endsnippet



snippet respond_to "respond_to do |format| ..."
respond_to do |format|
  format.${1:html} { ${2} }$0
end
endsnippet



snippet route_spec
it 'routes to #${1:action}' do
  ${2:get}("/${3:url}").should route_to('`!v substitute(expand('%:t:r'), '_routing_spec$', '', '')`#$1'${4:, ${5:params}})$0
end
endsnippet



snippet Routes_spec
require 'spec_helper'


describe ${1:Model}sController do
  describe 'routing' do

    # TMP ${2:${1/([A-Z]+)/_\l$1/g}} # press tab untill you navigate to end of this line $0

    it 'routes to #index' do
      get("/${3:${2/^_//}}").should    route_to("$3s#index")
      get($3s_path).should route_to("$3s#index")
    end

    it "routes to #new" do
      get("/$3/new").should   route_to("$3s#new")
      get(new_$3_path).should route_to("$3s#new")
    end

    it "doesn't route to #show" do
      get("/$3/1").should     route_to('$3s#show', :id => "1")
      get($3_path(1)).should  route_to("$3s#show", :id => "2")
    end

    it "routes to #edit" do
      get("/$3/1/edit").should    route_to("$3s#edit", :id => "1")
      get(edit_$3_path(1)).should route_to("$3s#edit", :id => "1")
    end

    it "routes to #create" do
      post("/$3").should    route_to("$3s#create")
      post($3s_path).should route_to("$3s#create")
    end

    it "routes to #update" do
      put("/$3/1").should     route_to("$3s#update", :id => "1")
      put($3_path(1)).should  route_to("$3s#update", :id => "1")
    end

    it "routes to #destroy" do
      delete("/$3/1").should            route_to("$3s#destroy", :id => "1")
      delete(destroy_$3_path(1)).should route_to("$3s#destroy", :id => "1")
    end

  end
end
endsnippet



snippet test
test "`!v substitute(expand('%:t:r'), '_test$', '', '')` ${1:0000}0: ${2:description}" do
  $0
end
endsnippet



snippet fgirl
Factory.define :${1:factory_name} do |${2:f}|
  $2.${3:sequence(:name) { |n| "${4:$1 #{n}}" }}$0
end
endsnippet



snippet Fgirl
Factory.define :${1:factory_name}, :class => ${2:Object} do |${3:f}|
  $2.${4:sequence(:name) { |n| "${5:$1 #{n}}" }}$0
end
endsnippet



snippet SQL "ActiveRecord::Base.connection.execute('<query>')" i
ActiveRecord::Base.connection.execute(${1:"${2:query}"})$0
endsnippet


# Snippet for https://gist.github.com/1393751
snippet render_js "render_js ..." i
render_js "${1:jquery_selector}", "${2:`!v substitute(expand("%:t:r"), '_controller$', '', '')`}/_${3:partial}.html"${4:, { ${5:locals} }}
endsnippet



# Snippet for https://gist.github.com/1393751
snippet Render_js "respond_to do |format| format.js { render_js .... } end"
respond_to do |format|
  format.js { render_js "${1:jquery_selector}", "${2:`!v substitute(expand("%:t:r"), '_controller$', '', '')`}/_${3:partial}.html"${4:, { ${5:locals} }} }
end
endsnippet


snippet "\b(log|debug|warn|error|info)" "logger.(log|debug|warn|error|info)" r
Rails.logger.`!p snip.rv=match.group(1)` ${1:"${2}"}
endsnippet

# vim: set ts=2 sw=2 expandtab:
