# Prototype
snippet proto "proto"
${1:class_name}.prototype.${2:method_name} =
function(${3:first_argument}) {
	${4:// body...}
};
endsnippet

# Function
snippet fun "fun"
function ${1:function_name}(${2:argument}) {
	${3:// body...}
}
endsnippet

# Anonymous Function
snippet f "f"
function (${1}) {
	${3}
}${2:;}
endsnippet

# Immediate function
snippet (f "(f"
(function (${1}) {
	${3}
}(${2}));
endsnippet

# if
snippet if "if"
if (${1:true}) {
	${2}
}
endsnippet

# if ... else
snippet ife "ife"
if (${1:true}) {
	${2}
} else {
	${3}
}
endsnippet

# tertiary conditional
snippet ter "ter"
${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet

# switch
snippet switch "switch"
switch (${1:expression}) {
	case '${3:case}':
		${4}
		break;
	${5}
	default:
		${2}
}
endsnippet

# case
snippet case "case"
case '${1:case}':
	${2}
	break;
${3}
endsnippet

# for (...) {...}
snippet for "for"
for (var ${2:i} = 0, l = ${1:arr}.length; $2 < l; $2 ++) {
	var ${3:v} = $1[$2];${4:}
}
endsnippet

# for (...) {...} (Improved Native For-Loop)
snippet forr "forr"
for (var ${2:i} = ${1:arr}.length - 1; $2 >= 0; $2 --) {
	var ${3:v} = $1[$2];${4:}
}
endsnippet

# while (...) {...}
snippet wh "wh"
while (${1:/* condition */}) {
	${2}
}
endsnippet

# try
snippet try "try"
try {
	${1}
} catch (${2:e}) {
	${3:/* handle error */}
}
endsnippet

# do...while
snippet do "do"
do {
	${2}
} while (${1:/* condition */});
endsnippet

# Object Method
snippet :f ":f"
${1:method_name}: function (${2:attribute}) {
	${4}
}${3:,}
endsnippet

# setTimeout function
snippet timeout "timeout"
setTimeout(function () {${3}}${2}, ${1:10});
endsnippet

# Get Elements
snippet get "get"
getElementsBy${1:TagName}('${2}')${3}
endsnippet

# Get Element
snippet gett "gett"
getElementBy${1:Id}('${2}')${3}
endsnippet

# console.log (Firebug)
snippet cl "cl"
console.log(${1});
endsnippet

# return
snippet ret "ret"
return ${1:result}
endsnippet

# for (property in object ) { ... }
snippet fori "fori"
for (var ${1:prop} in ${2:Things}) {
	${3:$2[$1]}
}
endsnippet

# hasOwnProperty
snippet has "has"
hasOwnProperty(${1})
endsnippet

# docstring
snippet /** "/**"
/**
 * ${1:description}
 *
 */
endsnippet

snippet @par "@par"
@param {${1:type}} ${2:name} ${3:description}
endsnippet

snippet @ret "@ret"
@return {${1:type}} ${2:description}
endsnippet

# JSON.parse
snippet jsonp "jsonp"
JSON.parse(${1:jstr});
endsnippet

# JSON.stringify
snippet jsons "jsons"
JSON.stringify(${1:object});
endsnippet

# self-defining function
snippet sdf "sdf"
var ${1:function_name} = function (${2:argument}) {
	${3}
	$1 = function ($2) {
		${4}
	};
};
endsnippet

# singleton
snippet sing "sing"
function ${1:Singleton} (${2:argument}) {
	// the cached instance
	var instance;
	// rewrite the constructor
	$1 = function $1($2) {
		return instance;
	};
	// carry over the prototype properties
	$1.prototype = this;
	// the instance
	instance = new $1();
	// reset the constructor pointer
	instance.constructor = $1;
	${3}
	return instance;
}
endsnippet

# Crockford's object function
snippet obj "obj"
function object(o) {
	function F() {}
	F.prototype = o;
	return new F();
}
endsnippet

# Define multiple properties
snippet props "props"
var ${1:my_object} = Object.defineProperties(
	${2:new Object()},
	{
		${3:property} : {
			get : function $1_$3_getter() {
				// getter code
			},
			set : function $1_$3_setter(value) {
				// setter code
			},
			value        : ${4:value},
			writeable    : ${5:boolean},
			enumerable   : ${6:boolean},
			configurable : ${7:boolean}
		}
	}
);
endsnippet

# Define single property
snippet prop "prop"
Object.defineProperty(
	${1:object},
	"${2:property}",
	{
		get : function $1_$2_getter() {
			// getter code
		},
		set : function $1_$2_setter(value) {
			// setter code
		},
		value        : ${3:value},
		writeable    : ${4:boolean},
		enumerable   : ${5:boolean},
		configurable : ${6:boolean}
	}
);
endsnippet


