# Closure loop
snippet forinlet "forinlet"
for ${1:name} in ${2:array}
	let $1
		${3}
endsnippet

# Array comprehension
snippet fora "fora"
for ${1:name} in ${2:array}
	${3}
endsnippet

# Object comprehension
snippet foro "foro"
for ${1:key}, ${2:value} of ${3:object}
	${4}
endsnippet

# Range comprehension (inclusive)
snippet forr "forr"
for ${1:name} from ${2:start} to ${3:finish}
	${4}
endsnippet

snippet forrb "forrb"
for ${1:name} from ${2:start} to ${3:finish} by ${4:step}
	${5}
endsnippet

# Range comprehension (exclusive)
snippet forrex "forrex"
for ${1:name} from ${2:start} til ${3:finish}
	${4}
endsnippet

snippet forrexb "forrexb"
for ${1:name} from ${2:start} til ${3:finish} by ${4:step}
	${5}
endsnippet

# Function
snippet fun "fun"
(${1:args}) ->
	${2}
endsnippet

# Function (bound)
snippet bfun "bfun"
(${1:args}) ~>
	${2}
endsnippet

# Class
snippet cla "class .."
class ${1:`!v substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
	${2}
endsnippet

snippet cla "class .. constructor: .."
class ${1:`!v substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
	(${2:args}) ->
		${3}
	${4}
endsnippet

snippet cla "class .. extends .."
class ${1:`!v substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} extends ${2:ParentClass}
	${3}
endsnippet

snippet cla "class .. extends .. constructor: .."
class ${1:`!v substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} extends ${2:ParentClass}
	(${3:args}) ->
		${4}
	${5}
endsnippet

# If
snippet if "if"
if ${1:condition}
	${2}
endsnippet

# If __ Else
snippet ife "ife"
if ${1:condition}
	${2}
else
	${3}
endsnippet

# Else if
snippet elif "elif"
else if ${1:condition}
	${2}
endsnippet

# Ternary If
snippet ifte "ifte"
if ${1:condition} then ${2:value} else ${3:other}
endsnippet

# Unless
snippet unl "unl"
${1:action} unless ${2:condition}
endsnippet

# Switch
snippet swi "swi"
switch ${1:object}
case ${2:value}
	${3}
default void
endsnippet

snippet mat "mat"
match ${1:object}
| ${2:value} => ${3}
| otherwise => void
endsnippet

# Log
snippet log "log"
console.log ${1}
endsnippet

# stringify
snippet str "str"
JSON.stringify ${1}, void, 2
endsnippet

# Try __ Catch
snippet try "try"
try
	${1}
catch ${2:error}
	${3}
endsnippet

# Require
snippet req "req"
${2:$1} = require '${1}'${3}
endsnippet

# Require!
snippet req! "req!"
require! ${1}
endsnippet

# Export
snippet exp "exp"
${1:root} = exports ? this
endsnippet


